version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: manage_invoice_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./datnan.sql:/docker-entrypoint-initdb.d/datnan.sql
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_allowed_packet=128M
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MYSQL_ROOT_PASSWORD}"]
      retries: 3
      timeout: 5s
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  redis:
    image: redis:6.2-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  frontend:
    container_name: frontend
    build:
      context: ./client
    ports:
      - "3000:3000"
    networks:
      - frontend
    environment:
      NODE_ENV: production
      NUXT_PUBLIC_API_BASE_URL: ${NUXT_PUBLIC_API_BASE_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  frontend_nginx:
    container_name: frontend_nginx
    image: nginx:alpine
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - frontend
    depends_on:
      frontend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www
    networks:
      - backend
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "artisan", "health:check"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      mysql:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  backend_nginx:
    container_name: backend_nginx
    image: nginx:alpine
    volumes:
      - ./backend:/var/www
      - ./nginx/backend.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8000:80"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

volumes:
  redis_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  common:
    driver: bridge
